(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{356:function(t,a,s){t.exports=s.p+"assets/img/changelog.15928312.png"},376:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"commit-生成-changelog"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit-生成-changelog"}},[t._v("#")]),t._v(" commit 生成 changelog")]),t._v(" "),e("p",[t._v("我们在使用 app 时，如果你有注意，就会发现在版本升级时，有些 app 会展示给你 changlog，用来标示每个版本更新了哪些功能。")]),t._v(" "),e("p",[t._v("例如，像这样 sublime text 的changelog")]),t._v(" "),e("p",[e("img",{attrs:{src:s(356),alt:"changelog"}})]),t._v(" "),e("p",[t._v("这篇文就来看看怎样生成这样的 changelog，生成 changelog 依赖于 commit 信息，所以要想自动生成 changelog，首先要规范好 commit 信息。")]),t._v(" "),e("h3",{attrs:{id:"commit-信息校验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit-信息校验"}},[t._v("#")]),t._v(" commit 信息校验")]),t._v(" "),e("p",[t._v("git 提供了 hook 用来在进行 git 操作时进行校验，当然，这里我们选择用插件")]),t._v(" "),e("p",[t._v("需要先安装 "),e("strong",[t._v("husky")]),t._v("和 "),e("strong",[t._v("commitlint")]),t._v("两个插件")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -D husky commitlint\n")])])]),e("p",[t._v("在 package.json 中，新增 husky 属性，对 commit-msg 用 commitlint 插件进行校验")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hooks"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"commit-msg"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commitlint -E HUSKY_GIT_PARAMS"')]),t._v("\t\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("使用 commitlint 需要新建 "),e("strong",[t._v("commitlint.config.js")]),t._v(" 文件，进行配置，具体配置可以看"),e("a",{attrs:{href:"https://commitlint.js.org/#/reference-configuration",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),e("OutboundLink")],1),t._v("， 这里我们选择常规配置，常规配置一般就够用了。需要先安装 "),e("strong",[t._v("@commitlint/config-conventional")]),t._v(" 插件，再配置 commitlint.config.js")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@commitlint/config-conventional'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("就大功告成了，如果不出意外的话，每次 commit 之前都会进行校验")]),t._v(" "),e("h3",{attrs:{id:"commit-信息如何写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit-信息如何写"}},[t._v("#")]),t._v(" commit 信息如何写")]),t._v(" "),e("p",[t._v("一个符合规范的 commit 信息应该包括三个部分 header（必填）、body(可忽略)、footer (可忽略)")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("<type, 必填>(<scope，可忽略>): subject(必填)\n")])])]),e("p",[t._v("type 包含以下几种")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("type")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("是否出现在changelog中")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("feat")]),t._v(" "),e("td",[t._v("新功能(feature)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("会")])]),t._v(" "),e("tr",[e("td",[t._v("fix")]),t._v(" "),e("td",[t._v("修复 bug")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("会")])]),t._v(" "),e("tr",[e("td",[t._v("docs")]),t._v(" "),e("td",[t._v("文档")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("自行决定")])]),t._v(" "),e("tr",[e("td",[t._v("style")]),t._v(" "),e("td",[t._v("格式（不影响代码运行的变动）")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("自行决定")])]),t._v(" "),e("tr",[e("td",[t._v("refactor")]),t._v(" "),e("td",[t._v("重构（即不是新增功能，也不是修改bug的代码变动）")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("自行决定")])]),t._v(" "),e("tr",[e("td",[t._v("test")]),t._v(" "),e("td",[t._v("增加测试")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("自行决定")])]),t._v(" "),e("tr",[e("td",[t._v("chore")]),t._v(" "),e("td",[t._v("构建过程或辅助工具的变动")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("自行决定")])])])]),t._v(" "),e("p",[t._v("一个最简短的 commit 例子如下")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feat: 新增人员搜索功能'")]),t._v("\n")])])]),e("h3",{attrs:{id:"commit-生成-changelog-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit-生成-changelog-2"}},[t._v("#")]),t._v(" commit 生成 changelog")]),t._v(" "),e("p",[t._v("生成 changelog.md 我们选择的是 "),e("strong",[t._v("conventional-changelog-cli")])]),t._v(" "),e("p",[t._v("安装完毕后，我们在 package.json 中新增一行 script")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"script"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"changelog"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"conventional-changelog -p angular -i CHANGELOG.md -s"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("执行这条 script，就会将符合规范的 commit 记录生成 changelog.md 文件。")]),t._v(" "),e("p",[t._v("如果是第一个生成 changelog 文件，可以执行 "),e("strong",[t._v("conventional-changelog -p angular -i CHANGELOG.md -s -r 0")]),t._v(" 将所有的 commit 都生成在文件里。")]),t._v(" "),e("p",[t._v("那么上面的这条 script，只会将当前的 commit 跟最近一次 tag 的提交做对比，列出两者之间的 diff")]),t._v(" "),e("p",[t._v("所以，在 commit 之后，如果这是一次版本更新的话，要及时将这次 commit 打上 tag，")]),t._v(" "),e("p",[t._v("列出所有 tag")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git tag\n")])])]),e("p",[t._v("新建 tag")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git tag -a v1.2.0 -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'版本信息'")]),t._v("\n")])])]),e("p",[t._v("也可以直接使用  npm version 来更新版本 "),e("strong",[t._v("「推荐」")])]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("npm version 1.2.0 \n")])])]),e("p",[t._v("这条指令可以直接将 package.json 中的 version 更改为 1.2.0，同时也会生成同名的 tag，还是帮你提交 commit，默认commit 信息也为版本号，你也可以直接指定 commit 信息")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("npm version 1.2.0 -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'说点啥呢'")]),t._v("\n")])])]),e("p",[t._v("将 tag 信息推到 远程，别忘了顺便把 commit 提交上去。")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git push --tag\n")])])]),e("p",[t._v("注意：保持 tag 号跟 package.json 中的 version 一致，就不会产生歧义。")])])}),[],!1,null,null,null);a.default=n.exports}}]);