import{_ as s,c as n,o as a,d as e}from"./app.38b01d5e.js";const l="/assets/changelog.628b6a7f.png",C=JSON.parse('{"title":"commit 生成 changelog","description":"","frontmatter":{},"headers":[{"level":2,"title":"commit 信息校验","slug":"commit-信息校验","link":"#commit-信息校验","children":[]},{"level":2,"title":"commit 信息如何写","slug":"commit-信息如何写","link":"#commit-信息如何写","children":[]},{"level":2,"title":"生成 changelog","slug":"生成-changelog","link":"#生成-changelog","children":[]}],"relativePath":"tools/生成changelog.md"}'),p={name:"tools/生成changelog.md"},t=e('<h1 id="commit-生成-changelog" tabindex="-1">commit 生成 changelog <a class="header-anchor" href="#commit-生成-changelog" aria-hidden="true">#</a></h1><p>我们在使用 app 时，如果你有注意，就会发现在版本升级时，有些 app 会展示给你 changelog，用来标示每个版本更新了哪些功能。</p><p>例如，像这样 sublime text 的 changelog</p><p><img src="'+l+`" alt="changelog"></p><p>这篇文就来看看怎样生成这样的 changelog，生成 changelog 依赖于 commit 信息，所以要想自动生成 changelog，首先要规范好 commit 信息。</p><h2 id="commit-信息校验" tabindex="-1">commit 信息校验 <a class="header-anchor" href="#commit-信息校验" aria-hidden="true">#</a></h2><p>git 提供了 hook 用来在进行 git 操作时进行校验，当然，这里我们选择用插件</p><p>需要先安装 <strong>husky</strong> 和 <strong>commitlint</strong> 两个插件</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">husky</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commitlint</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在 package.json 中，新增 husky 属性，对 commit 提交的信息用 commitlint 插件进行校验</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">husky</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">hooks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">commit-msg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">commitlint -E HUSKY_GIT_PARAMS</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>使用 commitlint 需要新建 <strong>commitlint.config.js</strong> 文件，进行配置，具体配置可以看<a href="https://commitlint.js.org/#/reference-configuration" target="_blank" rel="noreferrer">文档</a>，这里我们选择常规配置，常规配置一般就够用了。需要先安装 <strong>@commitlint/config-conventional</strong> 插件，再配置 commitlint.config.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@commitlint/config-conventional</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>就大功告成了，如果不出意外的话，每次 commit 之前都会进行校验</p><h2 id="commit-信息如何写" tabindex="-1">commit 信息如何写 <a class="header-anchor" href="#commit-信息如何写" aria-hidden="true">#</a></h2><p>一个符合规范的 commit 信息应该包括三个部分 header（必填）、body(可忽略)、footer (可忽略)，具体信息可查看<a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noreferrer">文档</a></p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;type, 必填&gt;(&lt;scope，可忽略&gt;): subject(必填)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>type 包含以下几种</p><table><thead><tr><th>type</th><th>说明</th><th style="text-align:center;">是否出现在 changelog 中</th></tr></thead><tbody><tr><td>feat</td><td>新功能(feature)</td><td style="text-align:center;">会</td></tr><tr><td>fix</td><td>修复 bug</td><td style="text-align:center;">会</td></tr><tr><td>docs</td><td>文档</td><td style="text-align:center;">自行决定</td></tr><tr><td>style</td><td>格式（不影响代码运行的变动）</td><td style="text-align:center;">自行决定</td></tr><tr><td>refactor</td><td>重构（即不是新增功能，也不是修改 bug 的代码变动）</td><td style="text-align:center;">自行决定</td></tr><tr><td>test</td><td>增加测试</td><td style="text-align:center;">自行决定</td></tr><tr><td>chore</td><td>构建过程或辅助工具的变动</td><td style="text-align:center;">自行决定</td></tr></tbody></table><p>一个最简短的 commit 例子如下</p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git commit -m &#39;feat: 新增人员搜索功能&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你想写的具体点，那可以使用下面的格式</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">&gt;[</span><span style="color:#A6ACCD;">optional scope</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">description</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">optional body</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">optional footer(s)</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="生成-changelog" tabindex="-1">生成 changelog <a class="header-anchor" href="#生成-changelog" aria-hidden="true">#</a></h2><p>生成 <a href="http://changelog.md" target="_blank" rel="noreferrer">changelog.md</a> 我们选择的是 <strong>conventional-changelog-cli</strong></p><p>安装完毕后，我们在 package.json 中新增一行 script</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">script</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">changelog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">conventional-changelog -p angular -i CHANGELOG.md -s</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>执行这条 script，就会将符合规范的 commit 提交信息生成 <a href="http://changelog.md" target="_blank" rel="noreferrer">changelog.md</a> 文件。</p><p>如果是第一次生成 changelog 文件，可以执行下面这条命令将所有的 commit 都生成在文件里。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">conventional-changelog</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">angular</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CHANGELOG.md</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-r</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么上面的这条 script，只会将当前的 commit 跟最近一次 tag 的提交做对比，列出两者之间的 diff</p><p>所以，在 commit 之后，如果这是一次版本更新的话，要及时将这次 commit 打上 tag，</p><p>列出所有 tag</p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git tag</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>新建 tag</p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git tag -a v1.2.0 -m &#39;版本信息&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>也可以直接使用 npm version 来更新版本 <strong>「推荐」</strong></p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm version 1.2.0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这条指令可以直接将 package.json 中的 version 更改为 1.2.0，同时也会生成同名的 tag，还是帮你提交 commit，默认 commit 信息也为版本号，你也可以直接指定 commit 信息</p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm version 1.2.0 -m &#39;说点啥呢&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将 tag 信息推到 远程，别忘了顺便把 commit 提交上去。</p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push --tag</span></span>
<span class="line"><span style="color:#A6ACCD;">git push</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意：保持 tag 号跟 package.json 中的 version 一致，就不会产生歧义。</p>`,43),o=[t];function c(r,i,d,m,g,y){return a(),n("div",null,o)}const u=s(p,[["render",c]]);export{C as __pageData,u as default};
