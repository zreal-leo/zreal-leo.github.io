import{_ as s,c as e,o as a,d as n}from"./app.38b01d5e.js";const y=JSON.parse('{"title":"vue3 迁徙","description":"","frontmatter":{},"headers":[{"level":2,"title":"Teleport","slug":"teleport","link":"#teleport","children":[]},{"level":2,"title":"异步组件","slug":"异步组件","link":"#异步组件","children":[]},{"level":2,"title":"过滤器","slug":"过滤器","link":"#过滤器","children":[]},{"level":2,"title":"事件 API","slug":"事件-api","link":"#事件-api","children":[]},{"level":2,"title":"片段","slug":"片段","link":"#片段","children":[]}],"relativePath":"vue/vue3迁徙.md"}'),l={name:"vue/vue3迁徙.md"},p=n(`<h1 id="vue3-迁徙" tabindex="-1">vue3 迁徙 <a class="header-anchor" href="#vue3-迁徙" aria-hidden="true">#</a></h1><h2 id="teleport" tabindex="-1">Teleport <a class="header-anchor" href="#teleport" aria-hidden="true">#</a></h2><h2 id="异步组件" tabindex="-1">异步组件 <a class="header-anchor" href="#异步组件" aria-hidden="true">#</a></h2><h2 id="过滤器" tabindex="-1">过滤器 <a class="header-anchor" href="#过滤器" aria-hidden="true">#</a></h2><p>在 vue3 中，过滤器已经被移出，官方推荐使用 计算属性或者方法来替代过滤器</p><h2 id="事件-api" tabindex="-1">事件 API <a class="header-anchor" href="#事件-api" aria-hidden="true">#</a></h2><p>在 vue2 中，我们会使用一个新的 Vue 实例来作为组件通信的方式，比如</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> eventBus </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在组件中，就可以引用 eventBus</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">import { eventBus } from &#39;xx/xx&#39; mounted(){ // 监听事件 eventBus.$on(&#39;event&#39;, ()=&gt; {}) } beforeDestory(){ // 移出监听</span></span>
<span class="line"><span style="color:#A6ACCD;">eventBus.$off(&#39;event&#39;) }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在 vue3 中，vue 实例中已经移除了 $off，$on，$once 方法，只保留了一个 $emit 方法用于子组件触发父组件的事件。</p><h2 id="片段" tabindex="-1">片段 <a class="header-anchor" href="#片段" aria-hidden="true">#</a></h2><p>在 vue2 中，每个组件都被要求只允许一个根节点，而在 vue3 中，则没有了这一限制，允许同时存在多个根节点</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">3</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,14),t=[p];function o(r,c,i,d,u,h){return a(),e("div",null,t)}const F=s(l,[["render",o]]);export{y as __pageData,F as default};
