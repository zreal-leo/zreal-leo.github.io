import{_ as s,c as n,o as a,d as l}from"./app.38b01d5e.js";const D=JSON.parse('{"title":"JS 数据类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"typeof","slug":"typeof","link":"#typeof","children":[]},{"level":2,"title":"Undefined","slug":"undefined","link":"#undefined","children":[{"level":3,"title":"Null","slug":"null","link":"#null","children":[]}]},{"level":2,"title":"Boolean","slug":"boolean","link":"#boolean","children":[]},{"level":2,"title":"Number","slug":"number","link":"#number","children":[{"level":3,"title":"NaN","slug":"nan","link":"#nan","children":[]},{"level":3,"title":"数值转换","slug":"数值转换","link":"#数值转换","children":[]}]},{"level":2,"title":"BigInt","slug":"bigint","link":"#bigint","children":[]},{"level":2,"title":"String","slug":"string","link":"#string","children":[{"level":3,"title":"转换为字符串值","slug":"转换为字符串值","link":"#转换为字符串值","children":[]},{"level":3,"title":"模板字符串","slug":"模板字符串","link":"#模板字符串","children":[]}]},{"level":2,"title":"Symbol","slug":"symbol","link":"#symbol","children":[{"level":3,"title":"注册全局 Symbol","slug":"注册全局-symbol","link":"#注册全局-symbol","children":[]},{"level":3,"title":"使用 symbol 作为对象属性","slug":"使用-symbol-作为对象属性","link":"#使用-symbol-作为对象属性","children":[]}]},{"level":2,"title":"Object","slug":"object","link":"#object","children":[]}],"relativePath":"js/JS数据类型.md"}'),e={name:"js/JS数据类型.md"},p=l(`<h1 id="js-数据类型" tabindex="-1">JS 数据类型 <a class="header-anchor" href="#js-数据类型" aria-hidden="true">#</a></h1><p>JavaScript 有 7 种简单的数据类型：Null、Undefined、Array、String、Boolean、Symbol, BigInt。还有一种复杂数据类型 Object。</p><h2 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-hidden="true">#</a></h2><p>为了检测数据类型，可以使用 <code>typeof</code>，typeof 有以下几个返回值</p><ul><li>undefined</li><li>boolean</li><li>object 表示值为对象或者 null</li><li>number</li><li>string</li><li>symbol</li><li>bigint</li><li>function</li></ul><p>当试图读取一个未定义的变量如 age 时，会报<code>age is not defined</code>的错误，但此时，如果用<code>typeof</code> 去检测 age 的数据类型时，会发现，<code>typeof age</code>的值为<code>undefined</code></p><p>由于 typeof 检测数据类型不是很理想，我们可以使用 <code>Object.property.toString.call()</code> 来判断数据类型</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">property</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(arr)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// type 为 [object Array]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>第二个单词就是该变量的准确类型</p><h2 id="undefined" tabindex="-1">Undefined <a class="header-anchor" href="#undefined" aria-hidden="true">#</a></h2><p>Undefined 类型只有一个值，那就是 undefined，当定义一个变量但没有赋初始值时，相当于给变量赋了 undefined 的值。所以永远不必将 undefined 的值手动赋值给某个变量</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// a ==== undefined  true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="null" tabindex="-1">Null <a class="header-anchor" href="#null" aria-hidden="true">#</a></h3><p>Null 类型同样也只有一个值，那就是 null。代表一个空对象指针，当想给一个变量赋于对象的值，而当下又没有值可以赋予，则可直接赋值为 null。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>由于历史原因，导致 <code>typeof null === &#39;object&#39;</code>，实际上 null 有专属的数据类型 Null</p><h2 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-hidden="true">#</a></h2><p>Boolean 类型有两个字面值，true 和 false。虽然 Boolean 类型只有两个值，但是其他所有的数据类型都可以通过<code>Boolean()</code>函数来转换成为 Boolean 值，转换规则如下表</p><table><thead><tr><th>数据类型</th><th>转换为 true</th><th>转换为 false</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>任意非空字符串</td><td>空字符串</td></tr><tr><td>Number</td><td>非零数值，包括无穷值</td><td>0、NaN</td></tr><tr><td>Object</td><td>任意对象</td><td>Null</td></tr><tr><td>Undefined</td><td>无</td><td>undefined</td></tr></tbody></table><p>通过<code>Boolean()</code>函数转换成为 true 的值，也叫做 <b>truthy</b>，而与之对立的则被统称为 <b>falsy</b>。</p><p>在 if 等控制语句中，会自动执行其他数据类型到 Boolean 类型的转换，规则同 <code>Boolean()</code> 函数的转换规则一致。</p><h2 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-hidden="true">#</a></h2><p>JS 可以表示的数值存在一个范围，最大值存在 <code>Number.MAX_VALUE</code> 中，最小值存在于 <code>Number.MIN_VALUE</code>。 超出最大值的数值用<b> Infinity </b>表示，小于最小值的数组则用 <b>-Infinity</b> 表示。</p><p>可以使用 isFinite 函数来判断是否是介于最大值和最小值之间</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">isFinite</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// return true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Number 存在一个安全范围，超出这个范围，可能会丢失精度，最大值存在于 <code>Number.MAX_SAFE_INTEGER</code>中，为 <code>2 ** 53 - 1</code>，最小值存在于 <code>Number.MIN_SAFE_INTEGER</code>中，为<code>-(2 ** 53 - 1)</code>，超出可能出现精度丢失的问题，比如</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MAX_SAFE_INTEGER </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MAX_SAFE_INTEGER </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="nan" tabindex="-1">NaN <a class="header-anchor" href="#nan" aria-hidden="true">#</a></h3><p>在 Number 中有一个特殊的值 NaN(not a number)，用于表示本来要返回数值的操作失败了。</p><p>NaN 不等于包括 NaN 在内的任何值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>JS 提供了一个方法来判断数值是否是 NaN，<code>isNaN()</code> 函数，当函数的参数为 NaN 或无法转换为数字时，返回 true</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">22</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// false，可以转换成数字 22</span></span>
<span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true，无法转换为数字</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="数值转换" tabindex="-1">数值转换 <a class="header-anchor" href="#数值转换" aria-hidden="true">#</a></h3><p>将其他类型转换为数字类型有三种方法：Number()、parseInt() 和 parseFloat()</p><ul><li><p>Number()：Number()方法可用于所有其他数据类型，转换规则如下</p><ul><li>Boolean 类型，true 转换为 1，false 转换为 0</li><li>数值，直接返回</li><li>null，返回 0</li><li>undefined，返回 0</li><li>字符串，如果字符串完全由数字组成，那么返回对应的数字，否则返回 NaN。（还有 16 进制，用的太少不展开了）</li><li>对象，<b>以后再写吧</b></li></ul></li><li><p>parseInt()：parseInt()方法主要用来转换字符串，从前往后转换，直到遇到字符串为止，返回对应的数字。如果第一个字符串是字符串，则直接返回 NaN</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0234x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 234</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-124</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 124</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">x123</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>parseInt() 方法还支持第二个参数，用于指定需要转换的字符串原本是什么进制，默认是十进制，可以不传</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">11</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 3 2进制下的11转换成十进制，为3</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">AF</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 175</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>parseFloat()：parseFloat()方法也用来转换字符串，原理同 <code>parseInt()</code> 类似，不同之处有，parseFloat 只能转换十进制的字符串，且能转换浮点数，即小数。如果字符串有多个小数点，则只有第一个小数点是有效的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">12.12</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 12.12</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.2.3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 1.2</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a12.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="bigint" tabindex="-1">BigInt <a class="header-anchor" href="#bigint" aria-hidden="true">#</a></h2><p>BigInt 解决了 number 类型无法表示大于<code>2**53 -1</code> 或者小于 <code>-(2**53-1)</code> 的问题，提供了对任意长度的整数的支持</p><p>创建 BigInt 有两种方式，在整数后面加 <code>n</code> 或者调用 <code>BigInt</code> 函数，BigInt 的用法同 Number 类型相似</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b) </span><span style="color:#676E95;font-style:italic;">// 12n，即12</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> c </span><span style="color:#676E95;font-style:italic;">// Cannot mix BigInt and other types, use explicit conversions</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>BigInt 类型不能和常规 Number 类型混合使用，否则会报错，使用之前需要先进行类型转换，使用<code>Number</code>函数可以将 BigInt 转换为 Number 类型，使用<code>BigInt</code>可以将 Number 转换为 BigInt 类型</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(a) </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> c</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(c)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-hidden="true">#</a></h2><p>JS 中的字符串是不可变的，即字符串一旦创建，值就不能改变了。如果要修改某个变量中的字符串值，那么必须先销毁原始的字符串，再把新的字符串赋值给变量。</p><h3 id="转换为字符串值" tabindex="-1">转换为字符串值 <a class="header-anchor" href="#转换为字符串值" aria-hidden="true">#</a></h3><ul><li>toString() 适用于 Boolean、String、Number 和 对象，Null 和 Undefined 没有 toString 方法</li><li>String() 适用于所有，规则同 toString() 一致。null 和 undefined 传入时会返回 &#39;null&#39; 和 &#39;undefined&#39;</li></ul><h3 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a></h3><p>在 ES6 之后，新增了模板字符串，如<code>hello</code>。在模板字符串内，可以用 \${} 读取外部的变量。模板字符串配合函数能作为一种标签函数的用法（ tag function）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 接收到的参数依次是，原始的字符串数组，以及每个表达式求值的结果</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">tagFn</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// [&#39;&#39;, &#39;+&#39;, &#39;=&#39;, &#39;&#39;]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// [1,1,2]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">tagFn</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> + </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> = </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-hidden="true">#</a></h2><p>Symbol 是 ES6 新增的数据类型，Symbol 实例是唯一的，不可变的。Symbol 的用途是对象属性使用的是唯一标识符，不会发生属性冲突的危险。</p><p>创建 symbol 需要使用 <code>Symbol()</code> 函数，函数内可以对这个 symbol 的描述，但是拥有相同描述的两个 symbol 也并不相等</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> b) </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(c </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> d) </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="注册全局-symbol" tabindex="-1">注册全局 Symbol <a class="header-anchor" href="#注册全局-symbol" aria-hidden="true">#</a></h3><p>如果需要注册复用 Symbol 实例，可以在创建时使用 <code>Symbol.for()</code> 函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 会先检查全局是否存在以这个字符串创建的 symbol，如果没有，则创建 symbol 实例</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 先检查全局，发现有以 a 字符串创建的 symbol，返回该 symbol 实例</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> b) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="使用-symbol-作为对象属性" tabindex="-1">使用 symbol 作为对象属性 <a class="header-anchor" href="#使用-symbol-作为对象属性" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> symbol </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">symbol</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">symbol</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">this is string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>// TODO:</p><h2 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-hidden="true">#</a></h2>`,60),o=[p];function t(r,c,i,y,d,C){return a(),n("div",null,o)}const b=s(e,[["render",t]]);export{D as __pageData,b as default};
