import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"vue/生命周期.md","filePath":"vue/生命周期.md"}'),t={name:"vue/生命周期.md"};function l(p,s,r,h,o,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h1><p>直接先放上 vue 官网上拿来的生命周期图</p><p><img src="https://v3.cn.vuejs.org/images/lifecycle.png" alt="生命周期"></p><h2 id="创建实例" tabindex="-1">创建实例 <a class="header-anchor" href="#创建实例" aria-label="Permalink to &quot;创建实例&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./App.vue&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>以 APP 作为根组件，并挂载在 #app 这个 DOM 上。自此，组件的生命周期正式开始。</p><h3 id="init-events-lifecycle" tabindex="-1">init Events &amp; lifeCycle <a class="header-anchor" href="#init-events-lifecycle" aria-label="Permalink to &quot;init Events &amp; lifeCycle&quot;">​</a></h3><p>初始化组件的 Events ，Events 包括（on，emit，off）以及生命周期</p><h3 id="执行-beforecreate" tabindex="-1">执行 beforeCreate <a class="header-anchor" href="#执行-beforecreate" aria-label="Permalink to &quot;执行 beforeCreate&quot;">​</a></h3><h3 id="init-injections-reactivity" tabindex="-1">init Injections &amp; reactivity <a class="header-anchor" href="#init-injections-reactivity" aria-label="Permalink to &quot;init Injections &amp; reactivity&quot;">​</a></h3><p>初始化父组件对当前组件的 props，此时，已经能访问到父组件的 props 了。</p><p>初始化计算属性、methods 方法</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一个组件，此时它正作为子组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  props: { msg: String },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watch: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    msg: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此时能拿到值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      immerdiate: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="执行-created" tabindex="-1">执行 created <a class="header-anchor" href="#执行-created" aria-label="Permalink to &quot;执行 created&quot;">​</a></h3><h3 id="compile" tabindex="-1">compile <a class="header-anchor" href="#compile" aria-label="Permalink to &quot;compile&quot;">​</a></h3><p>执行编译过程，会检测有没有 <b>template</b> 字段。如果有，则编译 template 的内容，否则编译 el 中的 innerHTML</p><h3 id="执行-beforemount" tabindex="-1">执行 beforeMount <a class="header-anchor" href="#执行-beforemount" aria-label="Permalink to &quot;执行 beforeMount&quot;">​</a></h3><p>如果组件中存在着子组件，那么接着执行子组件的生命周期，直至所有子组件都 mounted 完为止</p><h3 id="执行-mounted" tabindex="-1">执行 mounted <a class="header-anchor" href="#执行-mounted" aria-label="Permalink to &quot;执行 mounted&quot;">​</a></h3><p>此时才能访问到 DOM 节点</p><p>此时，如果 data 发生改变，就会先执行 <strong>beforeUpdate</strong> 生命周期，执行时视图并未发生改变。继而重新渲染虚拟 DOM，执行 <strong>updated</strong> ，直至此时，视图层才会更新</p><h3 id="执行-beforeunmount" tabindex="-1">执行 beforeUnmount <a class="header-anchor" href="#执行-beforeunmount" aria-label="Permalink to &quot;执行 beforeUnmount&quot;">​</a></h3><p>当 beforeUnmount 钩子函数执行完毕之后，就开始移除事件监听，子组件等等</p><h3 id="执行-unmounted" tabindex="-1">执行 unmounted <a class="header-anchor" href="#执行-unmounted" aria-label="Permalink to &quot;执行 unmounted&quot;">​</a></h3><p>自此，组件的生命周期已经结束。</p>`,25)]))}const u=a(t,[["render",l]]);export{c as __pageData,u as default};
